# Default values for gogs.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

ingress:
  enabled: true
  className: ""
  annotations:
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "5000m"
    nginx.ingress.kubernetes.io/client_max_body_size: 1000m
  hosts:
    - host: git2.corp.amplelogic.com
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              port:
                number: 80
  tls: 
   - secretName: nginx-tls
     hosts:
       - git2.corp.amplelogic.com


replicaCount: 1

ports:
  - containerPort: 22
    name: ssh
  - containerPort: 3000 
    name: http

volumeMounts:
  - name: gogs-persistent-storage
    mountPath: /data
  - name: gog-volume
    mountPath: /data/gogs/conf/app.ini
    subPath: app.ini
  - name: gogs-sh
    mountPath: /app/gogs/script.sh
    subPath: script.sh  

volumes:
  - hostPath:
      path: /k8-data/gogs-nw
      type: DirectoryOrCreate
    name: gogs-persistent-storage
  - configMap:
      name: gogs-config
    name: gog-volume
  - configMap:
      name: gogs-sh
    name: gogs-sh    
   

# readinessProbe:
#   initialDelaySeconds: 180
#   periodSeconds: 10
#   timeoutSeconds: 1
#   successThreshold: 1
#   failureThreshold: 10
#   tcpSocket:
#     port: 3000

# livenessProbe:
#   initialDelaySeconds: 200
#   periodSeconds: 10
#   timeoutSeconds: 1
#   successThreshold: 1
#   failureThreshold: 10
#   tcpSocket:
#     port: 3000



image:
  repository: gogs/gogs
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.12.3"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  selector:
    app: gogs
  ports:
    - name: ssh
      protocol: TCP
      port: 10022
      targetPort: 22
    - name: http
      protocol: TCP
      port: 80
      targetPort: 3000


resources: 
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
     cpu: 500m
     memory: 1024Mi
  requests:
     cpu: 100m
     memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}


volumeMountsConfig:
  name: gogs-config
  fileName: app.ini
  fileContent: |
    BRAND_NAME = Gogs
    RUN_USER   = git
    RUN_MODE   = prod
    [database]
    TYPE = postgres
    HOST     = postgres:5432
    NAME     = postgres
    USER     = postgres
    PASSWORD = P@ssword
    SSL_MODE = disable
    PATH     = /app/gogs/data/gogs.db

    [repository]
    ROOT = /data/git/gogs-repositories
    [server]
    DOMAIN           = localhost
    HTTP_PORT        = 3000
    EXTERNAL_URL     = http://localhost:3000/
    DISABLE_SSH      = false
    SSH_PORT         = 22
    START_SSH_SERVER = false
    OFFLINE_MODE     = false

    [mailer]
    ENABLED = false
    [service]
    REGISTER_EMAIL_CONFIRM = false
    ENABLE_NOTIFY_MAIL     = false
    DISABLE_REGISTRATION   = false
    ENABLE_CAPTCHA         = true
    REQUIRE_SIGNIN_VIEW    = false

    [picture]
    DISABLE_GRAVATAR        = false
    ENABLE_FEDERATED_AVATAR = false

    [session]
    PROVIDER = file

    [log]
    MODE      = console
    LEVEL     = Info
    ROOT_PATH = /app/gogs/log

    [security]
    INSTALL_LOCK = true
    SECRET_KEY   = Fm9iSaCyxQSyh2w

volumeMountsScript:
  name: gogs-config
  fileName: script.sh
  fileContent: |
    #!/bin/bash
    set -xe
    while true
    do
      su git -c "/app/gogs/gogs admin create-user --name gogs --password welcomegogs123 --admin --email gogs@newuser.com |grep 'user already exists'"
      if [ "$?" -eq "0" ]; then
        exit 0
      fi
    done   